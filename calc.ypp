// =====================================
// Char|Int pointer|array analyser
// (C) rdmr, 2k6
// Unautorized Duplication Appreciated!
// =====================================

/*
 * The file "calc.y": Parser definitions
 * Contains the grammar rules and semantic actions.
 * Used by bison as an input file.
 */
/*========== 1. The Definition Section ==============================*/

%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

/* The file "parser.h" contains the definition of YYSTYPE: */
/* the type of values in the semantic stack of parser      */
#include "parser.h"

#include "str.h"

/* Any C++ code may be added here... */

%}

%term VAR TYPE_INT TYPE_CHAR
%term ENDL LPAR RPAR ILLEGAL
%left BRACKETS AST

%%
/*========== 2. The Grammar Section =========================================*/

                    /* Program is a sequence of lines containing expressions */
f : /* empty */
  | f t v ENDL        {  printf("= %s%s\n", $3.s, $2.s); }
  | f ENDL          { return 0; }           /* exit on empty line */
  | f error ENDL    { }                      /* error recovery on end line */
  ;
                    /* variable */

v : VAR             { $$ = "A is "; }
  | LPAR v RPAR     { $$ = $2; }
  | LPAR AST v RPAR { $$ = $3; $$ += "pointer to "; }
  | v BRACKETS      { $$ = $1; $$ += "array of "; }
  ;

                    /* type */
t : TYPE_CHAR       { $$ = "char "; } 
  | TYPE_INT        { $$ = "int "; }
  | LPAR t RPAR     { $$ = $2; }
  | t AST           { $$ = "pointer to "; $$ += $1; }
  ;

%%
/*================ 3. The Program Section ================================*/
int main() {
    printf("Enter an expression to evaluate (empty line for quit):\n");
    yyparse();
    return 0;
}

/* Parse error diagnostics */
int yyerror(const char *s) {
    printf("%s\n", s);
    return 0;
}
